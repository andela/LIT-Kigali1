swagger: '2.0'
info:
  description: 'This is documentation for Authors Haven - A Social platform for the creative at heart.'
  version: '1.0.0'
  title: 'LIT-Kigali1'
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: 'team.email@andela.com'
  license:
    name: 'Apache 2.0'
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: 'localhost:3000'
basePath: '/api/v1'
tags:
  - name: 'Auth'
    description: 'Get access to the protected resources'
  - name: 'Articles'
    description: 'Access to the articles resources'
  - name: 'Users'
    description: 'Access to the users resources'
  - name: 'Profiles'
    description: 'Acess to the profile resources'
  - name: 'Tags'
    description: 'Acess to the tag resources'
  - name: 'Comments'
    description: 'Access to the comments resources'
  - name: 'Notifications'
    description: 'Access to notification resources'
schemes:
  - 'https'
  - 'http'
consumes:
  - application/json
  - application/xml
produces:
  - application/json
  - application/xml
  - text/html
securityDefinitions:
  bearerAuth:
    type: apiKey
    in: header
    name: Authorization
paths:
  /users/login:
    post:
      summary: 'Logs in registered user'
      tags:
        - 'Auth'
      operationId: userLogin
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Created user object'
          required: true
          schema:
            $ref: '#/definitions/userLogin'
      responses:
        '200':
          description: returns user infromation
          schema:
            type: object
            properties:
              user:
                $ref: '#/definitions/user'
        '404':
          description: Unregistered user
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  body:
                    type: array
                    items:
                      type: string
                      example: 'user not found'
        '401':
          description: Email and password don't match
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  body:
                    type: array
                    items:
                      type: string
                      example: "Email and password don't match"
                      
  /users:
    post:
      summary: 'Register a new user'
      tags:
        - 'Auth'
      operationId: authSignup
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/userSignup'
      responses:
        '201':
          description: returns user information
          schema:
            type: object
            properties:
              user:
                $ref: '#/definitions/user'
                
  /users/signout:
   post:
    summary: Sign out a user
    tags:
     - 'Auth'
    operationId: authSignout
    parameters:
        - name: Authorization
          in: header
          description: JWT Token
          required: true
          type: string
    responses:
     '200':
      description: returns a message
      schema:
       type: object
       properties:
        status:
         type: number
         example: 200
        message:
         type: string
         example: Signed out successfully
  
  /users/{userId}/confirm_email/{confirmationCode}:
   get:
    summary: Confirm email
    tags:
     - 'Auth'
    operationId: authConfirmationCode
    parameters:
        - name: Authorization
          in: header
          description: JWT Token
          required: true
          type: string
        - name: userId
          in: path
          description: user id
          type: string
          required: true
        - name: confirmationCode
          in: path
          description: confirmation code
          type: string
          required: true
    responses:
     '200':
      description: returns a message
      schema:
       type: object
       properties:
        message:
         type: string
  /users/forget:
   post:
    summary: Reset the password
    tags:
     - 'Auth'
    parameters:
        - name: body
          in: body
          required: true
          schema:
           type: object
           properties:
            user:
             type: string
    responses:
     '200':
      description: returns a message
      schema:
       type: object
       properties:
        status:
         type: number
         example: 200
        message:
         type: string
         example: Password reset link sent sucessfully. Please check your email!
  /users/{userId}/reset/{resetCode}:
   put:
    summary: reset passward code
    tags:
     - 'Auth'
    parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: resetCode
          in: path
          required: true
          type: string
    responses:
     '200':
      description: returns a message
      schema:
       type: object
       properties:
        status:
         type: number
         example: 200
        message:
         type: string
         example: Your password has been reset successfully!
         
  /user:
    get:
      summary: 'Get the current user'
      security:
        - bearerAuth: []
      tags:
        - 'Users'
      operationId: getUser
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
      responses:
        '200':
          description: return current user
          schema:
            $ref: '#/definitions/user'
            
    put:
      summary: 'Update user profile'
      security:
        - bearerAuth: []
      tags:
        - 'Users'
      operationId: updateUser
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/updateUser'
      responses:
        '200':
          description: returns user information
          schema:
            type: object
            properties:
              user:
                $ref: '#/definitions/user'
  /users/{username}/grant:
   put:
    summary: Grant role to the user
    security:
     - bearerAuth: []
    tags:
     - 'Auth'
    operationId: grantRole
    parameters:
      - name: username
        in: path
        required: true
        type: string
      - name: body
        in: body
        required: true
        schema:
         type: object
         properties:
          role:
           type: string
    responses:
     '200':
       description: returns a message
       schema:
        type: object
        properties:
         status:
           type: number
           example: 200
         message: 
           type: string
                
  /profiles/{username}:
    put:
      summary: 'Update user profile'
      security:
        - bearerAuth: []
      tags:
        - 'Profiles'
      operationId: updateProfile
      parameters:
        - name: username
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/updateUser'
      responses:
        '200':
          description: return update user information
          schema:
            $ref: '#/definitions/profile'
    get:
     summary: Get profile by username
     tags:
      - 'Profiles'
     operationId: getProfile
     parameters:
        - name: username
          in: path
          required: true
          type: string
     responses:
      '200':
       description: return a profile
       schema:
        type: object
        properties:
         status:
          type: number
         message:
          type: string
         profile:
          $ref: '#/definitions/profile'
          
  /profiles/{username}/follow:
    post:
      summary: 'Follow a specific user'
      security:
        - bearerAuth: []
      tags:
        - 'Profiles'
      operationId: followUser
      parameters:
        - name: Authorization
          in: header
          description: JWT Token
          required: true
          type: string
        - name: username
          in: path
          required: true
          type: string
      responses:
        '200':
          description: return a user profile
          schema:
            $ref: '#/definitions/updateProfile'
  /profiles/{username}/unfollow:
    delete:
      summary: 'Follow a specific user'
      security:
        - bearerAuth: []
      tags:
        - 'Profiles'
      operationId: unFollowUser
      parameters:
        - name: Authorization
          in: header
          description: JWT Token
          required: true
          type: string
        - name: username
          in: path
          required: true
          type: string
      responses:
        '200':
          description: return a user profile
          schema:
            $ref: '#/definitions/profile'
            
  /profiles:
    get:
      tags:
      - 'Profiles'
      summary: Get all profiles
      operationId: getAllProfiles
      parameters:
        - name: page
          in: query
          description: change the page of output
          required: false
          type: string
      responses:
       '200':
         description: returns an array of profiles
         schema:
           type: object
           properties:
             status:
              type: string
             message:
              type: string
             profiles:
              type: array
              items:
               $ref: '#/definitions/profile'
               
  /articles:
    get:
      summary: 'Fetch all the articles'
      tags:
        - 'Articles'
      operationId: getArticles
      responses:
        '200':
          description: returns multiple articles of parcels
          schema:
            $ref: '#/definitions/multipleArticles'
    post:
      summary: 'Create a new article'
      security:
        - bearerAuth: []
      tags:
        - 'Articles'
      description: add a new parcel
      operationId: postArticle
      parameters:
        - name: Authorization
          in: header
          description: JWT Token
          required: true
          type: string
        - in: body
          name: body
          schema:
            $ref: '#/definitions/createArticle'
      responses:
        '201':
          description: returns the created article
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                $ref: '#/definitions/article'
                
  /articles/feed:
    get:
      summary: 'Fetch all articles created by followed users'
      security:
        - bearerAuth: []
      tags:
        - 'Articles'
      operationId: getArticlesFollowedUser
      responses:
        '200':
          description: returns multiple articles created by followed users
          schema:
            $ref: '#/definitions/article'

  /articles/{slug}:
    get:
      summary: 'Fetch a single article'
      tags:
        - 'Articles'
      parameters:
        - in: path
          name: slug
          required: true
          type: string
      responses:
        '200':
          description: returns a single article
          schema:
            $ref: '#/definitions/article'
    put:
      tags:
        - 'Articles'
      summary: 'Update a specific article'
      security:
        - bearerAuth: []
      operationId: updateArticle
      parameters:
        - name: Authorization
          in: header
          description: JWT Token
          required: true
          type: string
        - name: slug
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/updateArticle'
      responses:
        '200':
          description: returns an updated article
          schema:
            $ref: '#/definitions/article'
    delete:
      tags:
        - 'Articles'
      summary: 'Delete a specific article'
      security:
        - bearerAuth: []
      operationId: deleteArticle
      parameters:
        - name: Authorization
          in: header
          description: JWT Token
          required: true
          type: string
        - name: slug
          in: path
          required: true
          type: string
      responses:
        '200':
          description: returns a delete article
          schema:
            $ref: '#/definitions/article'
            
  /articles/{slug}/comments:
    post:
      summary: 'Add comment to an article'
      security:
        - bearerAuth: []
      tags:
        - 'Articles'
      description: Add Comments to an Article
      operationId: commentArticle
      parameters:
        - name: Authorization
          in: header
          description: JWT Token
          required: true
          type: string
        - name: slug
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/createComment'
      responses:
        '200':
          description: returns the created Comment
          schema:
            $ref: '#/definitions/comment'
    get:
      summary: 'Fetch all the comments'
      security:
        - bearerAuth: []
      tags:
        - 'Articles'
      description: Add Comments to an Article
      operationId: fetchComment
      parameters:
        - name: slug
          in: path
          required: true
          type: string
      responses:
        '200':
          description: returns the created Comment
          schema:
            $ref: '#/definitions/multipleComments'

  /articles/{slug}/comments/{id}:
    delete:
      tags:
        - 'Articles'
      summary: 'Delete comment from an article'
      security:
        - bearerAuth: []
      operationId: deleteComment
      parameters:
        - name: slug
          in: path
          required: true
          type: string
        - name: id
          in: path
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: return a delete comment
          schema:
            $ref: '#/definitions/comment'
    put:
     tags:
      - 'Comments'
     summary: Update a comment
     security: 
       - bearerAuth: []
     operationId: updateComment
     parameters:
        - name: Authorization
          in: header
          description: JWT Token
          required: true
          type: string
        - name: commentId
          in: path
          required: true
          type: string
     responses:
      '200':
       description: return a comment
       schema:
        $ref: '#/definitions/comment'
  /articles/{slug}/favorite:
    post:
      tags:
        - 'Articles'
      summary: 'Favorite a specific article'
      security:
        - bearerAuth: []
      operationId: favoriteArticle
      parameters:
        - name: slug
          in: path
          required: true
          type: string
      responses:
        '200':
          description: return a favorited article
          schema:
            $ref: '#/definitions/article'
    delete:
      tags:
        - 'Articles'
      summary: 'Unfavorite a specific article'
      security:
        - bearerAuth: []
      operationId: unFavoriteArticle
      parameters:
        - name: slug
          in: path
          required: true
          type: string
      responses:
        '200':
          description: return an unfavorited article
          schema:
            $ref: '#/definitions/article'
            
  /articles/{articleSlug}/rating:
   post:
    tags:
     - 'Articles'
    summary: Rate a specific article
    security:
        - bearerAuth: []
    operationId: rateArticle
    parameters:
        - name: Authorization
          in: header
          description: JWT Token
          required: true
          type: string
        - name: articleSlug
          in: path
          required: true
          type: string
    responses:
      '200':
        description: return rating information
        schema:
         $ref: '#/definitions/rating'
   delete:
    tags:
     - 'Articles'
    summary: delete rating from an article
    security:
      - bearerAuth: []
    operationId: deleteRating
    parameters:
        - name: Authorization
          in: header
          description: JWT Token
          required: true
          type: string
        - name: articleSlug
          in: path
          required: true
          type: string
    responses:
      '200':
       description: return message
       schema:
         type: object
         properties:
           status:
            type: string
           message:
            type: string
   get:
    tags:
     - 'Articles'
    summary: Get all ratings for a specific article
    operationId: getAllRating
    parameters:
        - name: articleSlug
          in: path
          required: true
          type: string
    responses:
      '200':
       description: return ratings information
       schema:
        $ref: '#/definitions/allRatings'
        
  /articles/{slug}/like:
    post:
      tags:
       - 'Articles'
      summary: Like a specific article
      security:
      - bearerAuth: []
      operationId: likeArticle
      parameters:
        - name: Authorization
          in: header
          description: JWT Token
          required: true
          type: string
        - name: slug
          in: path
          required: true
          type: string
      responses:
       '200':
        description: return an article
        schema: 
         $ref: '#/definitions/article'
         
  /articles/{slug}/dislike:
    post:
      tags:
       - 'Articles'
      summary: Dislike a specific article
      security:
      - bearerAuth: []
      operationId: dislikeArticle
      parameters:
        - name: Authorization
          in: header
          description: JWT Token
          required: true
          type: string
        - name: slug
          in: path
          required: true
          type: string
      responses:
       '200':
        description: return an article
        schema: 
         $ref: '#/definitions/article'
         
  /articles/{slug}/share/twitter:
    get:
     tags:
      - 'Articles'
     summary: Share article via twitter
     security: 
      - bearerAuth: []
     operationId: shareViaTwitter
     parameters:
        - name: Authorization
          in: header
          description: JWT Token
          required: true
          type: string
        - name: slug
          in: path
          required: true
          type: string
     responses:
      '200':
        description: return message
        schema:
          type: object
          properties:
           status: 
            type: number
           message:
            type: string
            
  /articles/{slug}/share/facebook:
    get:
     tags:
      - 'Articles'
     summary: Share article via facebook
     security: 
      - bearerAuth: []
     operationId: shareViaFacebook
     parameters:
        - name: Authorization
          in: header
          description: JWT Token
          required: true
          type: string
        - name: slug
          in: path
          required: true
          type: string
     responses:
      '200':
        description: return message
        schema:
          type: object
          properties:
           status: 
            type: number
           message:
            type: string
            
  /articles/{slug}/share/linkedin:
    get:
     tags:
      - 'Articles'
     summary: Share article via linkedin
     security: 
      - bearerAuth: []
     operationId: shareViaLinkedin
     parameters:
        - name: Authorization
          in: header
          description: JWT Token
          required: true
          type: string
        - name: slug
          in: path
          required: true
          type: string
     responses:
      '200':
        description: return message
        schema:
          type: object
          properties:
           status: 
            type: number
           message:
            type: string
            
  /articles/{slug}/share/email:
    get:
     tags:
      - 'Articles'
     summary: Share article via email
     security: 
      - bearerAuth: []
     operationId: shareViaEmail
     parameters:
        - name: Authorization
          in: header
          description: JWT Token
          required: true
          type: string
        - name: slug
          in: path
          required: true
          type: string
     responses:
      '200':
        description: return message
        schema:
          type: object
          properties:
           status: 
            type: number
           message:
            type: string
  /tags:
    get:
      tags:
        - 'Tags'
      summary: Get all the tags
      operationId: getTags
      responses:
        '200':
          description: returns an array of all the tags
          schema:
            $ref: '#/definitions/tags'
            
  /articles/{articleSlug}/comments/{commentId}/like:
    post:
      tags:
      - 'Articles'
      summary: Like a comment
      security: 
      - bearerAuth: []
      operationId: likeComment
      parameters:
        - name: Authorization
          in: header
          description: JWT Token
          required: true
          type: string
        - name: articleSlug
          in: path
          required: true
          type: string
        - name: commentId
          in: path
          required: true
          type: string
      responses:
       '200':
         description: returns like information
         schema:
           $ref: '#/definitions/likeComment'
    get:
     tags:
     - 'Articles'
     summary: Get all likes for a given comment
     security: 
      - bearerAuth: []
     operationId: getAllLikes
     parameters:
        - name: Authorization
          in: header
          description: JWT Token
          required: true
          type: string
        - name: articleSlug
          in: path
          required: true
          type: string
        - name: commentId
          in: path
          required: true
          type: string
     responses:
      '200':
       description: returns all dislikes for a given comment
       schema:
        $ref: '#/definitions/allDislikeComments'
        
  /articles/{articleSlug}/comments/{commentId}/dislike:
    post:
      tags:
      - 'Articles'
      summary: Like a comment
      security: 
      - bearerAuth: []
      operationId: dislikeComment
      parameters:
        - name: Authorization
          in: header
          description: JWT Token
          required: true
          type: string
        - name: articleSlug
          in: path
          required: true
          type: string
        - name: commentId
          in: path
          required: true
          type: string
      responses:
       '200':
         description: returns like information
         schema:
           $ref: '#/definitions/dislikeComment'
    get:
     tags:
     - 'Articles'
     summary: Get all dislike for a given comment
     security: 
      - bearerAuth: []
     operationId: getAllDislikes
     parameters:
        - name: Authorization
          in: header
          description: JWT Token
          required: true
          type: string
        - name: articleSlug
          in: path
          required: true
          type: string
        - name: commentId
          in: path
          required: true
          type: string
     responses:
      '200':
       description: returns all dislikes for a given comment
       schema:
        $ref: '#/definitions/allDislikeComments'
  /articles/{slug}/report:
   post:
    tags:
     - "Articles"
    summary: report an articles
    security: 
      - bearerAuth: []
    operationId: reportArticle
    parameters:
        - name: Authorization
          in: header
          description: JWT Token
          required: true
          type: string
        - name: slug
          in: path
          required: true
          type: string
    responses:
     '200':
       description: returns a message
       schema:
        type: object
        properties:
         status:
          type: number
          example: 200
         message:
          type: string
          example: Article Reported successfully
          
  /articles/:articleSlug/bookmark:
   post:
    tags:
     - 'Articles'
    summary: bookmark an article
    security: 
      - bearerAuth: []
    operationId: bookmarkArticle
    parameters:
        - name: Authorization
          in: header
          description: JWT Token
          required: true
          type: string
        - name: articleSlug
          in: path
          required: true
          type: string
    responses:
     '200':
      description: returns a message
      schema:
       type: object
       properties:
        status:
         type: number
         example: 200
        message:
         type: string
   delete:
    tags:
     - 'Articles'
    summary: bookmark an article
    security: 
      - bearerAuth: []
    operationId: deletebookmark
    parameters:
        - name: Authorization
          in: header
          description: JWT Token
          required: true
          type: string
        - name: articleSlug
          in: path
          required: true
          type: string
    responses:
     '200':
      description: returns a message
      schema:
       type: object
       properties:
        status:
         type: number
         example: 200
        message:
         type: string
  /notifications:
   get:
    tags:
     - 'Notifications'
    summary: Get all notifications
    security: 
       - bearerAuth: []
    operationId: getAllNotifications
    parameters: 
       - name: Authorization
         in: header
         description: JWT Token
         required: true
         type: string
    responses:
      '200':
       description: return an array of notification
       schema:
        type: object
        properties:
         status:
          type: number
          example: 200
         notifications:
          type: array
          items:
           $ref: '#/definitions/notification'
         notificationCounts:
          type: number
         pages:
          type: number
         page:
          type: number
   put:
    tags:
     - 'Notifications'
    summary: Mark all notification as read
    security: 
       - bearerAuth: []
    operationId: markNotificationAsRead
    responses:
     '200':
      description: Get all notification
      schema:
       type: object
       properties:
        status:
         type: string
        message:
         type: string
  /notifications/{notificationId}:
   get:
    tags:
     - 'Notifications'
    summary: Get a single notification
    security: 
       - bearerAuth: []
    operationId: getNotification
    parameters:
       - name: Authorization
         in: header
         description: JWT Token
         required: true
         type: string
       - name: notificationId
         in: path
         description: notification id
         required: true
         type: string
    responses:
     '200':
      description: returns a notification object
      schema:
       type: object
       properties:
        status:
         type: number
         example: 200
        notification:
         $ref: '#/definitions/notification'
  /notifications/disable:
   put:
    tags:
     - 'Notifications'
    summary: Disable notification
    operationId: disableNotification
    security: 
       - bearerAuth: []
    parameters:
       - name: Authorization
         in: header
         description: JWT Token
         required: true
         type: string
    responses:
     '200':
      description: returns a message
      schema:
       type: object
       properties:
        status:
         type: number
         example: 200
        message:
         type: string
         example: Notifications enabled
  /notifications/enable:
   put:
    tags:
     - 'Notifications'
    summary: Disable notification
    operationId: enableNotification
    security: 
       - bearerAuth: []
    parameters:
       - name: Authorization
         in: header
         description: JWT Token
         required: true
         type: string
    responses:
     '200':
      description: returns a message
      schema:
       type: object
       properties:
        status:
         type: number
         example: 200
        message:
         type: string
         example: Notifications enabled
  /users/facebook:
   get:
    tags:
    - 'Social'
    summary: facebook login
    operationId: facebookLogin
    responses:
     '200':
      description: returns message
  /users/facebook/callback:
   get:
    tags:
    - 'Social'
    summary: facebook login redirect
    operationId: facebookLoginRedirect
    responses:
     '200':
      description: redirect to facebook
  /users/twitter:
   get:
    tags:
    - 'Social'
    summary: twitter login
    operationId: twitterLogin
    responses:
     '200':
      description: returns message
  /users/twitter/callback:
   get:
    tags:
    - 'Social'
    summary: twitter login redirect
    operationId: twitterLoginRedirect
    responses:
     '200':
      description: redirect to facebook
  /users/google:
   get:
    tags:
    - 'Social'
    summary: google login
    operationId: googleLogin
    responses:
     '200':
      description: returns message
  /users/google/callback:
   get:
    tags:
    - 'Social'
    summary: google login redirect
    operationId: googleLoginRedirect
    responses:
     '200':
      description: redirect to facebook
  /users/{facebookId}/social:
   get:
    tags:
     - 'Social'
    summary: google login
    operationId: social
    parameters:
       - name: Authorization
         in: header
         description: JWT Token
         required: true
         type: string
       - name: facebookId
         in: path
         description: facebook Id
         required: true
         type: string
    responses:
     '200':
      description: returns message
  /users/stats:
   get:
    tags:
    - 'Users'
    summary: reading statistics
    operationId: readStats
    parameters:
       - name: Authorization
         in: header
         description: JWT Token
         required: true
         type: string
    responses:
     '200':
      description: returns reading statistics
      schema:
       type: object
       properties:
        status:
         type: number
         example: 200
        readingStats:
         type: number
definitions:
  user:
    type: object
    properties:
      id:
        type: string
        format: uuid
      email:
        type: string
        format: email
      username:
        type: string
      firstName:
        type: string
        example: 'Jake'
      lastName:
        type: string
        example: 'Jake'
      gender:
        type: string
      birthDate:
        type: string
        example: '2019-01-07'
      bio:
        type: string
      image:
        type: string
      cover:
        type: string
      status:
        type: string
        example: 'active'
      token:
        type: string
    required:
      - id
      - email
      - username
      - token
  userSignup:
    type: object
    properties:
      user:
        type: object
        properties:
          username:
            type: string
          email:
            type: string
            format: email
          password:
            type: string
            example: 'Ab@123456'
        required:
          - username
          - email
          - password
  userLogin:
    type: object
    properties:
      user:
        type: object
        properties:
          email:
            type: string
            format: email
            example: 'user@email.com'
          password:
            type: string
            example: 'user@user'
        required:
          - email
          - password
  article:
    type: object
    properties:
      article:
        type: object
        properties:
          slug:
            type: string
          title:
            type: string
          description:
            type: string
          body:
            type: string
          tagList:
            type: array
            items:
              type: string
          createdAt:
            type: string
          updatedAt:
            type: string
          favorited:
            type: boolean
          favoriteCount:
            type: number
          author:
            type: object
            properties:
              username:
                type: string
              bio:
                type: string
              image:
                type: string
              following:
                type: boolean
  multipleArticles:
    type: object
    properties:
      articles:
        type: array
        items:
          type: object
      articlesCount:
        type: number
  profile:
    type: object
    properties:
          username:
            type: string
          bio:
            type: string
          image:
            type: string
          following:
            type: boolean
  updateProfile:
    type: object
    properties:
     status:
      type: number
     message:
      type: string
     profile:
      $ref: '#/definitions/profile'
  comment:
    type: object
    properties:
      comment:
        type: object
        properties:
          id:
            type: string
          createdAt:
            type: string
          updatedAt:
            type: string
          body:
            type: string
          author:
            type: object
            properties:
              username:
                type: string
              bio:
                type: string
              image:
                type: string
              following:
                type: boolean
  multipleComments:
    type: object
    properties:
      comments:
        type: array
        items:
          type: object
      commentsCount:
        type: number
  tags:
    type: object
    properties:
      tags:
        type: array
        items:
          type: string
  updateUser:
    type: object
    properties:
      user:
        type: object
        properties:
          email:
            type: string
          bio:
            type: string
          image:
            type: string
  createArticle:
    type: object
    properties:
      article:
        type: object
        properties:
          title:
            type: string
          description:
            type: string
          body:
            type: string
          tagList:
            type: array
            items:
              type: string
    required:
      - title
      - description
      - body
  updateArticle:
    type: object
    properties:
      article:
        type: object
        properties:
          title:
            type: string
  createComment:
    type: object
    properties:
      comment:
        type: object
        properties:
          body:
            type: string
    required:
      - comment
  rating:
   type: object
   properties:
     rate:
      type: number
  allRatings:
   type: object
   properties:
    status:
     type: number
    message:
     type: string
    averageRate:
     type: number
    ratings:
     type: array
     items:
       type: object
       properties:
        id:
         type: string
        userId:
         type: string
        rating:
         type: number
        articleId:
         type: string
  likeComment:
   type: object
   properties:
    status:
     type: number
    message: 
     type: string
    like:
     type: object
     properties:
      id:
       type: string
      userId:
       type: string
      commentId:
       type: string
      value:
       type: string
  dislikeComment:
   type: object
   properties:
    status:
     type: number
    message: 
     type: string
    dislike:
     type: object
     properties:
      id:
       type: string
      userId:
       type: string
      commentId:
       type: string
      value:
       type: string
  allDislikeComments:
   type: object
   properties:
    status:
     type: number
    counts: 
     type: number
    dislikes: 
     type: array
     items:
       type: object
       properties:
        id:
         type: string
        userId:
         type: string
        commentId:
         type: string
        value:
         type: string
    page:
     type: number
    pages:
     type: number
  notification:
   type: object
   properties:
    id:
     type: string
    userId: 
     type: string
    notification:
     type: string
    link:
     type: string
    status:
     type: string
